# Makefile –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥

.PHONY: help build up down restart logs clean test dev install

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
BLUE=\033[0;34m
GREEN=\033[0;32m
RED=\033[0;31m
NC=\033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
	@echo "$(BLUE)–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'

build: ## –ó–±—É–¥—É–≤–∞—Ç–∏ –≤—Å—ñ Docker –æ–±—Ä–∞–∑–∏
	@echo "$(BLUE)–ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤...$(NC)"
	docker compose build

up: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
	@echo "$(BLUE)–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤...$(NC)"
	docker compose up -d
	@echo "$(GREEN)‚úì –°–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω–æ!$(NC)"
	@echo "  Frontend: http://localhost:8080"
	@echo "  Backend:  http://localhost:3000"
	@echo "  Health:   http://localhost:3000/health"

down: ## –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
	@echo "$(BLUE)–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤...$(NC)"
	docker compose down
	@echo "$(GREEN)‚úì –°–µ—Ä–≤—ñ—Å–∏ –∑—É–ø–∏–Ω–µ–Ω–æ$(NC)"

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
	@echo "$(BLUE)–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤...$(NC)"
	docker compose restart
	@echo "$(GREEN)‚úì –°–µ—Ä–≤—ñ—Å–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ$(NC)"

logs: ## –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
	docker compose logs -f

logs-backend: ## –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ backend
	docker compose logs -f backend

logs-frontend: ## –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ frontend
	docker compose logs -f frontend

logs-db: ## –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	docker compose logs -f database

ps: ## –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
	docker compose ps

clean: ## –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —Ç–∞ volumes
	@echo "$(RED)–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ —Ç–∞ –¥–∞–Ω–∏—Ö...$(NC)"
	docker compose down -v
	@echo "$(GREEN)‚úì –û—á–∏—â–µ–Ω–æ$(NC)"

clean-all: ## –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏, volumes —Ç–∞ –æ–±—Ä–∞–∑–∏
	@echo "$(RED)–ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è...$(NC)"
	docker compose down -v --rmi all
	@echo "$(GREEN)‚úì –ü–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–æ$(NC)"

install-backend: ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ backend
	@echo "$(BLUE)–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π backend...$(NC)"
	cd backend && npm install
	@echo "$(GREEN)‚úì Backend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ$(NC)"

install-frontend: ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ frontend
	@echo "$(BLUE)–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π frontend...$(NC)"
	cd frontend && npm install
	@echo "$(GREEN)‚úì Frontend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ$(NC)"

install: install-backend install-frontend ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ

dev-backend: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ backend –≤ dev —Ä–µ–∂–∏–º—ñ
	cd backend && npm run dev

dev-frontend: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ frontend –≤ dev —Ä–µ–∂–∏–º—ñ
	cd frontend && npm run dev

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏
	@echo "$(BLUE)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤...$(NC)"
	cd backend && npm test || true
	@echo "$(GREEN)‚úì –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

health: ## –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
	@echo "$(BLUE)–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤...$(NC)"
	@curl -s http://localhost:3000/health | jq . && echo "$(GREEN)‚úì Backend OK$(NC)" || echo "$(RED)‚úó Backend ERROR$(NC)"
	@curl -s http://localhost:8080/health && echo "$(GREEN)‚úì Frontend OK$(NC)" || echo "$(RED)‚úó Frontend ERROR$(NC)"

api-test: ## –¢–µ—Å—Ç—É–≤–∞—Ç–∏ API endpoints
	@echo "$(BLUE)–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API...$(NC)"
	@echo "\n1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:"
	@curl -X POST http://localhost:3000/api/tasks \
		-H "Content-Type: application/json" \
		-d '{"title":"Test Task","description":"API Test","priority":"high"}' \
		| jq .
	@echo "\n2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å:"
	@curl -s http://localhost:3000/api/tasks | jq .
	@echo "\n3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
	@curl -s http://localhost:3000/api/tasks/stats/summary | jq .

rebuild: clean build up ## –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞ (clean + build + up)
	@echo "$(GREEN)‚úì –ü–µ—Ä–µ–±—É–¥–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

backup-db: ## –ë–µ–∫–∞–ø –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	@echo "$(BLUE)–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...$(NC)"
	docker compose exec -T database pg_dump -U taskuser taskdb > backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úì –ë–µ–∫–∞–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ$(NC)"

restore-db: ## –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö (BACKUP_FILE=backup.sql make restore-db)
	@echo "$(BLUE)–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...$(NC)"
	@if [ -z "$(BACKUP_FILE)" ]; then \
		echo "$(RED)–ü–æ–º–∏–ª–∫–∞: –í–∫–∞–∂—ñ—Ç—å BACKUP_FILE=backup.sql$(NC)"; \
		exit 1; \
	fi
	cat $(BACKUP_FILE) | docker compose exec -T database psql -U taskuser taskdb
	@echo "$(GREEN)‚úì –ë–∞–∑—É –¥–∞–Ω–∏—Ö –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ$(NC)"

stats: ## –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
	docker stats --no-stream

shell-backend: ## –í—ñ–¥–∫—Ä–∏—Ç–∏ shell –≤ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
	docker compose exec backend sh

shell-frontend: ## –í—ñ–¥–∫—Ä–∏—Ç–∏ shell –≤ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
	docker compose exec frontend sh

shell-db: ## –í—ñ–¥–∫—Ä–∏—Ç–∏ psql –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
	docker compose exec database psql -U taskuser taskdb

prune: ## –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ Docker —Ä–µ—Å—É—Ä—Å–∏
	@echo "$(RED)–û—á–∏—â–µ–Ω–Ω—è Docker —Å–∏—Å—Ç–µ–º–∏...$(NC)"
	docker system prune -af --volumes
	@echo "$(GREEN)‚úì –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞$(NC)"

# ===== AUTO-UPDATE COMMANDS =====

update: ## –†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ Git —Ç–∞ Docker Hub
	@echo "$(BLUE)üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...$(NC)"
	./update.sh

auto-update: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω—å
	@echo "$(BLUE)üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...$(NC)"
	@echo "$(GREEN)–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏$(NC)"
	./auto-update.sh

auto-update-bg: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É —Ñ–æ–Ω—ñ
	@echo "$(BLUE)üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —É —Ñ–æ–Ω—ñ...$(NC)"
	nohup ./auto-update.sh > auto-update.log 2>&1 &
	@echo "$(GREEN)‚úì –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ —É —Ñ–æ–Ω—ñ$(NC)"
	@echo "–õ–æ–≥–∏: tail -f auto-update.log"
	@echo "–ó—É–ø–∏–Ω–∏—Ç–∏: make stop-auto-update"

stop-auto-update: ## –ó—É–ø–∏–Ω–∏—Ç–∏ —Ñ–æ–Ω–æ–≤–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
	@echo "$(BLUE)üõë –ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...$(NC)"
	pkill -f auto-update.sh || true
	@echo "$(GREEN)‚úì –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ$(NC)"

install-service: ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ systemd —Å–µ—Ä–≤—ñ—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
	@echo "$(BLUE)üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è systemd —Å–µ—Ä–≤—ñ—Å—É...$(NC)"
	sudo cp task-auto-update@.service /etc/systemd/system/
	sudo systemctl daemon-reload
	@echo "$(GREEN)‚úì –°–µ—Ä–≤—ñ—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ$(NC)"
	@echo ""
	@echo "$(BLUE)–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:$(NC)"
	@echo "  $(GREEN)sudo systemctl enable task-auto-update@$$USER.service$(NC)  # –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫"
	@echo "  $(GREEN)sudo systemctl start task-auto-update@$$USER.service$(NC)   # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å"
	@echo "  $(GREEN)sudo journalctl -u task-auto-update@$$USER.service -f$(NC)  # –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏"

service-status: ## –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤—ñ—Å—É
	@sudo systemctl status task-auto-update@$$USER.service || echo "$(RED)–°–µ—Ä–≤—ñ—Å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ$(NC)"

service-logs: ## –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ systemd —Å–µ—Ä–≤—ñ—Å—É
	@sudo journalctl -u task-auto-update@$$USER.service -f

prod-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ production —Ä–µ–∂–∏–º—ñ (–∑ Docker Hub)
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ —É production —Ä–µ–∂–∏–º—ñ...$(NC)"
	docker compose -f docker-compose.prod.yml up -d
	@echo "$(GREEN)‚úì Production —Å–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω–æ!$(NC)"
	@echo "  Frontend: http://localhost:8080"
	@echo "  Backend:  http://localhost:3000"

prod-down: ## –ó—É–ø–∏–Ω–∏—Ç–∏ production —Å–µ—Ä–≤—ñ—Å–∏
	@echo "$(BLUE)–ó—É–ø–∏–Ω–∫–∞ production —Å–µ—Ä–≤—ñ—Å—ñ–≤...$(NC)"
	docker compose -f docker-compose.prod.yml down
	@echo "$(GREEN)‚úì Production —Å–µ—Ä–≤—ñ—Å–∏ –∑—É–ø–∏–Ω–µ–Ω–æ$(NC)"

prod-logs: ## –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ production
	docker compose -f docker-compose.prod.yml logs -f

check-updates: ## –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—å (–±–µ–∑ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è)
	@echo "$(BLUE)üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å...$(NC)"
	@echo ""
	@echo "$(BLUE)Git Repository:$(NC)"
	@git fetch origin main --quiet
	@LOCAL=$$(git rev-parse HEAD); \
	REMOTE=$$(git rev-parse origin/main); \
	if [ "$$LOCAL" != "$$REMOTE" ]; then \
		echo "  $(GREEN)‚úÖ –ù–æ–≤—ñ –∫–æ–º—ñ—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ$(NC)"; \
		git log HEAD..origin/main --oneline | head -5; \
	else \
		echo "  $(GREEN)‚úì –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–æ$(NC)"; \
	fi
	@echo ""
	@echo "$(BLUE)Docker Hub:$(NC)"
	@docker compose -f docker-compose.prod.yml pull --quiet && echo "  $(GREEN)‚úì –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ$(NC)" || echo "  $(RED)‚úó –ü–æ–º–∏–ª–∫–∞$(NC)"

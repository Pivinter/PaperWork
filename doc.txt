МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ «ЛЬВІВСЬКА ПОЛІТЕХНІКА»
Розгортання
інформаційних систем
МЕТОДИЧНІ ВКАЗІВКИ
до виконання курсової роботи
для студентів освітньо-професійної програми «Розподілені інформаційні
системи та технології» першого (бакалаврського) рівня вищої освіти
спеціальності 126 «Інформаційні системи та технології»
Затверджено
на засіданні кафедри
інформаційних систем та мереж.
Протокол № 7 від 15.11.2023 р.
Львів – 2023Розгортання інформаційних систем: методичні вказівки до виконання
курсової роботи для студентів освітньо-професійної програми «Розподілені
інформаційні системи та технології» першого (бакалаврського) рівня вищої
освіти спеціальності 126 «Інформаційні системи та технології» / уклад. :
М.М. Лучкевич, І.О. Шаклеіна, О.О. Гудь: Видавництво Львівської політехніки,
2023. – 39 с.
УкладачіМ.М. Лучкевич, к.ф.-м.н.
І.О. Шаклеіна, к.ф.-м.н., доцент
О.О. Гудь
Відповідальний за випускЛитвин В. В., д-р. техн. наук, проф.
РецензентВерес О.М., к.т.н., доцент
Сікора О.В., к.т.н., доцент
2ЗМІСТ
1. Мета курсової роботи
2. Структура та обсяг курсової роботи
2.1. Завдання на курсову роботу
2.2. Вимоги до основних розділів роботи
2.2.1 Зміст
2.2.2. Вступ
2.2.3. Визначення вимог до ІС та засоби реалізації проєкту
2.2.4. Призначення та особливості використання зазначених
інструментів CI/CD
2.2.5. Налаштування та налагодження автоматизованих процесів
CI/CD
2.2.6. Тестування та валідація створеної системи CI/CD
2.2.7. Оцінка ефективності впровадженої системи CI/CD
2.2.8. Висновки
2.2.9. Список використаних інформаційних джерел
3. Дотримання академічної доброчесності здобувачами вищої освіти
4. Вимоги до оформлення
5. Організація та контроль виконання роботи
6. Захист роботи
7. Оцінювання курсової роботи
8. Завдання на курсову роботу
Список рекомендованої літератури
Додаток А. Структура титульної сторінки
Додаток Б. Структура завдання на курсову роботу
Додаток В. Приклади тем курсової роботи
3
4
5
6
6
6
6
7
8
17
17
17
18
18
18
19
27
28
28
29
30
33
34
351. Мета курсової роботи
Сучасний розвиток інформаційних технологій невіддільно пов’язаний із
стрімкими змінами та високою динамікою в галузі розробки програмного
забезпечення. Постійна необхідність у вдосконаленні процесів розробки та
розгортання якісного програмного продукту ставить перед організаціями й
розробниками потребу у нових підходах та сучасному інструментарії. У цьому
контексті концепція безперервної інтеграції (Continuous Integration, CI) та
безперервного розгортання (Continuous Deployment, CD) інформаційних систем
виходить на передній план, сприяючи автоматизації та оптимізації процесів
розробки та впровадження програмного забезпечення.
Метою виконання курсової роботи є закріплення теоретичних знань,
набутих під час вивчення вибіркової навчальної дисципліни «Розгортання
інформаційних систем» та вдосконалення практичних навиків роботи з
відповідним інструментарієм шляхом розробки і налаштування інформаційної
системи або середовища безперервної інтеграції / розгортання.
Результатом виконання курсової роботи є створення інформаційної системи
або
середовища
безперервної
інтеграції/розгортання
з
урахуванням
особливостей конкретного індивідуального проекту. Робота має на меті
розкриття ключових аспектів, що стосуються CI/CD; вивчення теоретичних
аспектів та поглиблення навичок роботи з основним DevOps інструментарієм;
формування практичні рекомендацій щодо налаштування ефективного процесу
автоматизованої інтеграції та розгортання програмного забезпечення відповідно
до специфіки ІТ-проєктів.
Виконання курсової роботи забезпечує формування спеціальних (фахових,
предметних) компетентностей, а саме:
o ФКС 1.3. Здатність застосовувати концепцію DevOps для побудови
культури співробітництва у команді розробників інформаційно-
технологічних проектів;
4o ФКС 1.6. Здатність розгортати, адмініструвати та супроводжувати
інформаційні системи впродовж всього життєвого циклу.
Виконання курсової роботи дає змогу досягнути нормативного змісту
підготовки здобувачів вищої освіти, сформульованого у програмному результаті
навчання, а саме:
o ПРН 1.7. Використовувати знання і навички для автоматизації
розгортання та налаштування інфраструктури в різних середовищах.
У ході виконання курсової роботи студенти повинні закріпити навички
самостійного опрацьовування інформаційних джерел та навички практичного
використання сучасних засобів інтеграції / розгортання інформаційних систем;
виробити вміння комплексного використання відповідного інструментарію для
ефективного розгортання програмних продуктів.
У методичних рекомендаціях подані вимоги до змісту, порядку виконання
та оформлення курсової роботи з дисципліни «Розгортання інформаційних
систем».
2. Структура та обсяг курсової роботи
Курсова робота повинна містити такі розділи:
o завдання на курсову роботу;
o зміст;
o вступ;
o визначення вимог до ІС та засобів реалізації проєкту; аргументація
вибору і опис методів та інструментів CI/CD інформаційної системи;
o налаштування та налагодження автоматизованих процесів CI/CD для
досліджуваної предметної області;
o тестування та валідація створеної системи CI/CD;
o оцінка ефективності впровадженої системи CI/CD;
o висновки;
o список використаних інформаційних джерел.
5За потреби можна винести деякий матеріал у додатки, що мають бути
розташовані після списку використаних інформаційних джерел. У тексті роботи
в даному випадку має бути посилання на відповідний розділ.
Зразок оформлення титульної сторінки наведений у додатку А.
Обсяг курсової роботи повинен становити 25 – 40 сторінок друкованого
тексту (без врахування додатків).
Примітка: зміст курсової роботи може бути змінений керівником роботи.
2.1. Завдання на курсову роботу
Завдання на курсову роботу видається керівником. У завданні вказується
тема роботи, прізвище студента, номер групи, перелік основних задач, які
необхідно розв’язати у ході виконання курсової роботи, та календарний план їх
виконання.
Бланк завдання, підписаний керівником та студентом, підшивається до
пояснювальної записки курсової роботи. Приклад завдання на курсову роботу
наведений у додатку Б.
2.2. Вимоги до основних розділів роботи
2.2.1 Зміст
Зміст курсової роботи повинен відповідати темі та завданню на курсову
роботу. У змісті вказуються номери і назви основних розділів курсової роботи та
номери сторінок, де вони починаються.
2.2.2. Вступ
Вступ має відповідати темі роботи, бути коротким та конкретним. У вступі
формулюється мета курсової роботи, опис проблеми у загальному вигляді, її
актуальність; наводиться перелік завдань, які необхідно розв’язати для
вирішення проблеми; обґрунтовується вибір програмних засобів розроблення
проєкту.
6Вступ,
висновки
до
курсового
проєкту,
перелік
використаних
інформаційних ресурсів та додаток не нумеруються.
2.2.3. Визначення вимог до ІС та засоби реалізації проєкту
Визначення вимог до використовуваної в роботі ІС та засобів реалізації
проєкту здійснюється за допомогою таблиці 1.
0Golang
1Python
2VueJS
3Java
4Ruby
5React JS
6PHP
7C#
8AngularJS
9C++
456
SonarQubeDatadog
3
Ansible
2
Jenkins
1
Docker
GitLab
0
Prometheu
s
Таблиця 1. Визначення предметної області та обов’язкового інструменту CI/CD
Для вибору конкретного інструменту, який обовʼязково повинен бути
присутнім в кінцевому варіанті середовища CI/CD, та визначення мови реалізації
проєкту, розгортання якого буде проводитись в роботі, потрібно зважаючи на
своє місце у загальному списку виконавців проєкту, визначити клітинку в
таблиці наведеній вище, де стовпці це десятки, а рядки – одиниці. Десятки
позначають конкретний інструмент, який обовʼязково повинен бути присутнім в
7кінцевому варіанті середовища CI/CD, одиниці позначають мову проєкту, для
якого потрібно побудувати відповідне середовище CI/CD.
Наприклад, студенту, прізвище якого у загальному списку групи є під
номером 27, потрібно розробити CI/CD середовище для супроводу проєкту, для
реалізації якого використано мову C# з обов’язковим використанням
інструмента Jenkins. Студенту з номером 41 в списку потрібно працювати з
проєктом, реалізованим з використанням мови програмування Python і
обов’язково практично використати інструмент Prometheus тощо.
Приклади тем курсової роботи наведено в Додатку 3.
2.2.4. Призначення та особливості використання зазначених
інструментів CI/CD
1. GitLab
GitLab – це вебплатформа для розробки програмних продуктів, що надає
користувачам
велику
кількість
інструментів
для
керування
версіями
програмного забезпечення та спільної роботи розробників. GitLab містить в собі
систему контролю версій Git, інструменти для збору, тестування та розгортання
програмного забезпечення, інструменти звітування та систему відстеження
проблем та дає змогу оптимізувати процеси розробки й випуску продукту.
Дану платформу можна використовувати в якості хмарного сервісу або
самостійно встановлювати на власних серверах, пов'язуючи цю систему з Active
Directory та з LDAP-серверами для організації безпечної авторизації та
автентифікації користувачів. Цей інструмент
дозволяє розробникам мати
повний контроль над своїми проектами та даними, ефективно співпрацювати,
зберігати та керувати версіями свого програмного забезпечення.
GitLab CI/CD – це безкоштовний опенсорсний інструмент убудований у
систему контролю версій GitLab. Окремий GitLab CI/CD-сервер може
підтримувати роботу більш ніж 25 000 користувачів. На основі таких серверів
можна створювати системи, що відрізняються високою доступністю.
8При використанні GitLab CI/CD процес обробки коду проекту ділиться на
стадії, кожна з яких може складатися з кількох завдань, що виконуються в
певному порядку. Завдання піддаються тонкому налаштуванню та
можуть
виконуватись паралельно.
2. Docker
Docker – це відкрита платформа для розробки, доставки та запуску програм
у контейнерах. Docker дозволяє відокремити програми від інфраструктури, щоб
розробники могли швидко постачати програмне забезпечення. За допомогою
даного інструменту можна керувати інфраструктурою, оптимізувати доставку,
тестування та розгортання коду, значно зменшуючи затримку між написанням
коду та його запуском у виробництві.
Образ контейнера Docker – це легкий, автономний, виконуваний пакет
програмного забезпечення, що включає все необхідне для запуску програми: код,
час роботи, системні інструменти, системні бібліотеки та налаштування. В образі
контейнера Docker міститься образ базової операційної системи, код програми,
бібліотеки, від якої залежить. Все це скомпоновано у вигляді єдиної сутності, на
основі якої можна створити контейнер. Кілька контейнерів можуть працювати
на одній машині та спільно використовувати ядро ОС з іншими контейнерами,
кожен з яких виконується як ізольовані процеси в просторі користувача.
Під час виконання контейнера Docker усередині нього зазвичай виконується
якась програма. Завдяки використанню Docker можна, на тому самому
комп'ютері, одночасно запускати безліч контейнерів. І, як і будь-які інші
програми, контейнери Docker можна запускати, зупиняти, видаляти.
Набір інструкцій, дотримуючись яких Docker збиратиме образ контейнера,
містяться у файлі Dockerfile. Серед популярних офіційних базових образів
можна назвати python, ubuntu, alpine, node.
93. Jenkins
Jenkins – це платформа для автоматизації процесів розробки програмного
забезпечення, що має потужний набір можливостей, спрямованих на
автоматизацію завдань, пов'язаних зі складанням, тестуванням, виконанням
автоматизованих збірок, розгортанням, інтеграцією, випуском та постачання
програмного забезпечення. За допомогою різноманітних плагінів та інтеграцій з
іншими інструментами розробки, Jenkins забезпечує можливість створення
повноцінної та ефективної системи автоматизації процесів розробки.
До переваг Jenkins можна віднести той факт, що його скрипти дуже добре
структуровані, зрозумілі, їх легко читати. У скриптах можна використовувати
системи аутентифікації, що, наприклад, дозволяє підключатися до різних
закритих систем.
Використання агентів (процесів які служать для виконання робочих завдань
на віддаленому вузлі, забезпечують масштабованість та розподілення завдань
між різними вузлами) в Jenkins дозволяє забезпечити розподілення завдань між
різними вузлами, зменшити час виконання та підвищити ефективність процесу
збірки та тестування. У Jenkins існує два типи агентів: майстер та вузол. Майстер
- це головний вузол, на якому встановлено Jenkins та з яким взаємодіють усі інші
вузли; на інших вузлах запускаються робочі завдання.
Агенти можуть бути запущені на різних операційних системах та
платформах, що дає можливість запускати тестування та збірку проекту на
різних середовищах. Агенти можуть бути запущені як на фізичних машинах, так
і на віртуальних машинах, контейнерах тощо. Крім того, Jenkins також підтримує
режим розподіленого виконання завдань, коли різні агенти можуть виконувати
частину завдання, щоб прискорити процес збірки та тестування. Це дозволяє
зменшити час виконання та покращити ефективність процесу.
Серед широко відомих особливостей Jenkins можна відзначити простоту
налаштування, високий рівень автоматизації різних операцій та зрозумілу
документацію.
104. Ansible
Ansible – це інструмент автоматизації управління конфігурацією, який
дозволяє конфігурувати та керувати інфраструктурою з декількох вузлів
одночасно. Він забезпечує зручну та ефективну роботу з конфігурацією,
розгортанням програмного забезпечення, оркестрацією, моніторингом та
керуванням інфраструктурою, що дозволяє швидко та зручно забезпечити
роботу всієї інфраструктури на будь-якому етапі проекту. Ansible дозволяє
описувати задачі у вигляді playbooks, які виконуються на віддалених хостах.
Основними перевагами Ansible є простота та легкість використання. Він
використовує OpenSSH для транспортування і використовує зрозумілу людині
мову, розроблену для швидкого початку роботи без тривалого навчання.
5. Prometheus
Prometheus – це система моніторингу та аналізу метрик, яка збирає дані від
спеціальних агентів збору метрик та інших додатків, які підтримують протокол
збору метрик Prometheus. За потреби можна використовувати експортери для
моніторингу машин Linux (Node Exporter), для баз даних (SQL Exporter або
MongoDB Exporter) та балансувальників навантаження HTTP (HAProxy Exporter)
та інші. Вони встановлюються на цільові об'єкти та збирають певні метрики.
Prometheus отримує метрики із заданої множини сервісів за допомогою pull,
зберігає зібрані дані в базі даних та надає можливість виконувати запити на ці
метрики з інтерактивним веб-інтерфейсом та API. Мінімальна конфігурація
системи моніторингу Prometheus складається з сервера Prometheus і програми,
що відстежується, достатньо лише вказати за якою адресою необхідно
запитувати метрики. Prometheus має свій власний веб-інтерфейс, але він
недостатній, тому варто використовувати сервіс Grafana для візуалізації даних
Загалом, Prometheus дозволяють моніторити системи та додатки, збирати та
зберігати метрики, а також аналізувати їх за допомогою запитів та графіків. Це
дозволяє операторам моніторингу та розробникам знаходити проблеми та
оптимізувати продуктивність систем та додатків.
116. SonarQube
SonarQube – це відкрите програмне забезпечення для аналізу якості коду,
що надає інструменти для статичного аналізу коду, оцінки ризиків безпеки та
покриття коду тестами. SonarQube дає змогу працювати з різними мовами
програмування, включаючи Java, C#, C/C++, JavaScript, TypeScript, Python і
багато інших.
SonarQube забезпечує корисну інформацію про стан проекту, таку як
покриття тестами, показники якості коду, виявлені помилки, проблеми з
безпекою, дублюючий код тощо. Це дозволяє командам розробників
зосередитися на покращенні якості коду і зниженні технічного боргу, що, в свою
чергу, підвищує стабільність, безпеку і ефективність програмного забезпечення.
SonarQube також інтегрується з різними інструментами розробки, такими як
Jenkins, GitLab, Visual Studio, Eclipse, IntelliJ IDEA, і дозволяє автоматизувати
аналіз коду в рамках процесу розробки програмного забезпечення.
Зазначений інструмент може бути використаний в різних сферах
програмування і розробки програмного забезпечення. Зокрема, SonarQube
допомагає ідентифікувати технічний
борг, тобто невідповідність
коду
встановленим стандартам, проблеми безпеки і ефективності. Також, є
можливість ідентифікувати проблеми безпеки в коді, такі як вразливості веб-
додатків, і надати рекомендації щодо їх виправлення.
SonarQube дозволяє вимірювати покриття тестами коду та може бути
інтегрований з різними інструментами розробки для аналізу коду в реальному
часі; дає змогу оцінювати якість коду за різними метриками, такими як покриття
тестами, проблеми безпеки, дублювання коду тощо. Це допомагає виявляти
проблеми з якістю коду на ранніх етапах розробки і виправляти їх до того, як
вони стануть серйозними проблемами.
127. Datadog
Datadog – це хмарна платформа моніторингу та аналізу логів, яка дозволяє
відслідковувати метрики, трасувати розподілені транзакції, аналізувати логи,
моніторити мережі та перевіряти стан систем.
Datadog надає широкі можливості збору метрик з різних джерел, включаючи
сервери, бази даних, контейнери, хмарні сервіси та багато іншого. Після збору
метрик, платформа дозволяє відслідковувати їх за допомогою графіків та
дашбордів, а також налаштувати сповіщення про проблеми. Datadog також
забезпечує інтеграцію з різними сервісами, такими як Slack, PagerDuty, AWS і
багатьма іншими.
Крім моніторингу, Datadog також надає можливості аналізу логів,
трейсингу, моніторингу мережі та безпеки. Загалом, Datadog є потужним
інструментом для моніторингу та аналізу систем, який дозволяє компаніям
ефективніше відслідковувати та усувати проблеми з їхніми сервісами
Слід звернути увагу, що під час виконання проєкту потрібно використати не
менше аніж чотири інструменти, що використовуються при розгортанні ІС та
дають змогу автоматизувати й оптимізувати процеси процесів розробки та
впровадження програмного забезпечення. Окрім зазначених в таблиці
інструментів, до цього переліку може бути включений будь-який інструментарій,
що дозволяє ефективно провести розгортання ІС згідно сучасних принципів
роботи з програмним забезпеченням.
До таких інструментів можна віднести всі інструменти, що розглядались
при вивченні дисципліни «Розгортання інформаційних систем» та деякі
популярні DevOps інструменти, що не зазначені вище.
Зокрема, можна виділити такі засоби, як:
NGINX – вебсервер та проксі сервер з відкритим вихідним кодом, який
набув широку популярність завдяки високій продуктивності, надійності та
розширюваності. Він створений для обробки великого обсягу HTTP-запитів та
може використовуватися для різних завдань вебхостингу, вебдодатків,
13зберігання вебконтенту, балансування навантаження та багатьох інших
сценаріїв.
NGINX може діяти як HTTP-проксі-сервер, який розподіляє запити між
бекенд-серверами
для
підтримки
балансування
навантаження,
та
масштабуватися для обробки великої кількості запитів та вебдодатків.
Використовуючи функціональність реверс-проксі, NGINX може обслуговувати
як проксі-сервер для обробки запитів від клієнтів та направляти їх до внутрішніх
серверів, таких як додатки та бази даних. Зазначений інструмент надає потужну
систему конфігурації, яка дозволяє налаштовувати різні аспекти веб-сервера за
допомогою конфігураційних файлів.
Nexus Sonatype – платформа для управління артефактами в області
розробки програмного забезпечення, що надає можливість розробникам
зберігати, організовувати та керувати артефактами, такими як бібліотеки,
залежності, пакети, та інші складові програмних проектів. Nexus Sonatype
використовується для підтримки процесів розробки, континуальної інтеграції та
розгортання, що робить її невід'ємною частиною DevOps культури та практик.
Ця платформа дозволяє створювати приватні та безпечні репозиторії
артефактів, налаштовувати правила доступу та авторизації, а також забезпечує
можливість створення віддалених репозиторіїв для швидкого завантаження
залежностей та бібліотек з інтернету. Nexus Sonatype спрощує управління
залежностями, поліпшує ефективність розробки та забезпечує надійність та
безпеку для проектів усіх масштабів. Відома своєю стабільністю та широким
спектром функцій, Nexus Sonatype є необхідним інструментом для команд
розробників та інженерів у сфері програмної інженерії.
GitHub Actions – набір інструментів для автоматизації процесів розробки,
які дозволяють збирати, тестувати та розгортати програмне забезпечення на
платформі GitHub. За допомогою GitHub Actions можна створювати складні
робочі процеси для виконання різноманітних дій на основі різних подій, таких як
коміти
до
репозиторію,
відкриття
pull
забезпечення та багато іншого.
14
request,
випуски
програмногоGitHub Actions надає багато готових дій, які можна використовувати в
робочих процесах, таких як створення контейнерів, запуск тестів, розгортання
додатку на хмарні сервіси зокрема. GitHub Actions дозволяє налаштовувати
окремі робочі процеси для кожної гілки репозиторію та для кожного пул-
реквесту, що дозволяє більш точно контролювати тестування та розгортання
коду. Також GitHub Actions надає можливість налаштовувати робочі процеси для
взаємодії з зовнішніми сервісами, такими як Slack або JIRA, що дозволяє
автоматизувати комунікацію та звітність про стан проєкту.
Docker Hub – хмарний реєстр (репозитарій) образів Docker, який надає
інфраструктуру для зберігання, публікації та обміну Docker образами. Docker
Hub є однією з найпопулярніших платформ для роботи з контейнерами і є
офіційним реєстром Docker, підтримуваним компанією Docker.
Контейнери можуть бути використані як артефакти, що дає змогу
використовувати даний сервіс в якості артефакторію та організувати
завантаження й розгортання додатків засобами DockerHub.
Grafana – відкрита платформа для аналізу та візуалізації даних з різних
джерел, включаючи системи моніторингу, бази даних, лог-файли та інші. Вона
надає можливості для створення графіків, панелей та інших візуальних елементів
для аналізу даних. Grafana також надає можливості для налаштування сповіщень
на основі метрик, що збираються з різних джерел, що дозволяє операторам
моніторингу отримувати сповіщення про проблеми чи відхилення метрик в
реальному часі.
Terraform – інструмент для налаштування конфігурації, який працює з
будь-якою хмарою, чи то приватна локальна або загальнодоступна система, і
забезпечує безпечне та зручне проектування, управління та вдосконалення ІаС.
Він використовується для побудови, управління, оновлення та видалення
інфраструктурних ресурсів, таких як віртуальні машини, контейнери, мережі та
інші, використовуючи інфраструктуру як філософію коду. За своїм форматом,
розробка terraform конфігурації нагадує опис інфраструктурних компонентів,
необхідних для роботи проєкту.
15Kubernetes – платформа для організації контейнерів з відкритим кодом, яка
автоматизує багато ручних процесів, що беруть участь у розгортанні, управлінні
та масштабуванні контейнерних програм. Користувачі можуть об’єднати групи
хостів, на яких запущені контейнери Linux, а Kubernetes допомагає легко та
ефективно керувати цими кластерами.
Таким чином, Kubernetes є системою з відкритим вихідним кодом для
автоматизації розгортання та масштабування контейнерних програм, а також
управління ними. Кластери Kubernetes можуть охоплювати хости на локальних,
загальнодоступних, приватних або гібридних хмарах. З цієї причини Kubernetes
є ідеальною платформою для розміщення власних хмарних додатків, які
вимагають швидкого масштабування.
Argo CD – інструмент безперервної доставки GitOps для Kubernetes, що
дотримується шаблону GitOps використання репозиторіїв Git для визначення
бажаного стану програми. Argo CD реалізовано як контролер Kubernetes, який
безперервно відстежує запущені програми та порівнює поточний живий стан із
бажаним цільовим станом (як зазначено в репозиторії Git). Argo CD повідомляє
та візуалізує відмінності, надаючи можливості для автоматичної або ручної
синхронізації поточного стану назад до бажаного цільового стану. Будь-які
зміни, внесені до бажаного цільового стану в репозиторії Git, можуть бути
автоматично застосовані та відображені у вказаних середовищах.
Chef – інструмент управління конфігурацією, забезпечує швидку,
масштабовану та гнучку автоматизацію ІТ-технологій у веб-масштабі.
Інструмент автоматизації Chef використовує спеціальні інструкції для
конфігурації вебсерверів, баз даних та балансування навантаження, що
допомагають визначити компоненти інфраструктури та те, як ці компоненти
можна легко розгорнути, налаштувати й керувати ними.
Якщо для виконання курсової роботи обрано інструменти, не зазначені у
вказівках, потрібно звернутись для керівника курсової роботи для узгодження їх
використання в даному аспекті.
16В пояснювальній записці до курсового проєкту слід навести короткий опис
обраних для реалізації проєкту методів та інструментів CI/CD інформаційної
системи, що має на меті розкрити особливості використання відповідного
інструментарію CI/CD та навести аргументацію що до доцільності його
використання з огляду на обраний проєкт.
2.2.5. Налаштування та налагодження автоматизованих процесів
CI/CD
В
роботі
потрібно
провести
налаштування
та
налагодження
автоматизованих процесів CI/CD для деякої ІС. Відповідні дії потрібно описати
у даному розділі, наводячи основні команди та скриншоти, що свідчать про
успішне виконання основних етапів налагодження.
Якщо на даному етапі виникають помилки чи проблеми, повязані зі
специфікою ОС, різними версіями та налаштуваннями, варто навести в тексті їх
опис та шляхи вирішення.
2.2.6. Тестування та валідація створеної системи CI/CD
Після створення системи CI/CD
потрібно провести
її тестування та
валідацію на основі реальних даних та сценаріїв використання. Наприклад,
завантаження змін в проекті до віддаленого репозиторію.
2.2.7. Оцінка ефективності впровадженої системи CI/CD
Оцінити
ефективність
впровадженої
системи
CI/CD,
враховуючи
покращення процесів розробки та якості програмного забезпечення. Зазначити,
як використання обраних інструментів дозволило оптимізувати процес
розгортання/інтеграції відповідної ІС.
172.2.8. Висновки
У висновках наводяться основні результати виконання курсової роботи,
вказуються її позитивні сторони та недоліки, надаються рекомендації щодо
практичного застосуванню результатів роботи.
2.2.9. Список використаних інформаційних джерел
Наводиться список літературних джерел (не менше 5 джерел), які були
використані при виконанні курсової роботи. Слід звернути увагу на необхідність
використовувати сучасні інформаційні джерела або офіційні сайти виробників
відповідних ІТ продуктів із зазначенням авторів статей і торгових марок,
потребу дотримуватись офіційного наукового стилю.
Укладаючи списки літературних джерел, посилаючись на інші видання,
потрібно керуватися чинними стандартами бібліографічного опису, які
розробила Книжкова палата України (ДСТУ 8302:2015).
3. Дотримання академічної доброчесності здобувачами вищої освіти
Академічна доброчесність – це сукупність етичних принципів та визначених
законом правил, якими мають керуватися учасники освітнього процесу під час
навчання, викладання та провадження наукової (творчої) діяльності з метою
забезпечення довіри до результатів навчання та/або наукових (творчих)
досягнень.
Дотримання
академічної
доброчесності
здобувачами
вищої
освіти
передбачає:
o використання в освітній або дослідницькій діяльності лише
перевірених та достовірних джерел інформації та сумлінне посилання
на них;
o уникнення фальсифікування або фабрикування інформації, наукових
результатів зі подальшим використанням у курсовій роботі;
o виключення з практики академічної діяльності проявів хабарництва за
отримання будь-яких переваг в освітній або дослідницькій діяльності;
18o дотримання норм законодавства про авторське право і суміжні права;
o відповідальність за порушення академічної доброчесності.
Нормами і правилами академічної доброчесності здобувачів вищої освіти є:
o підтверджувати свій рівень сумлінності в усьому навчальному
процесі: виконувати графік навчального процесу, своєчасно складати
заліки та іспити, виконувати кваліфікаційні роботи. Не допускати
проявів академічної нечесності: прохання про сприяння, надання або
отримання допомоги від третіх осіб під час складання будь-якого виду
підсумкового контролю: наклеп на інших студентів та викладачів;
використання родинних або службових зв’язків для отримання
позитивної чи вищої оцінки; списування під час написання
контрольної роботи, складання заліку, іспиту;
o позбутися хибного трактування колективізму під час написання
контрольної роботи, складання іспиту, заліку. Не копіювати в інших
студентів звітів, лабораторних робіт, комп’ютерних програм,
курсових проєктів тощо;
o сповідувати культуру наукової сумлінності протягом здійснення всіх
видів наукової діяльності, не допускати плагіату в наукових та
кваліфікаційних роботах;
o поважати викладача як людину, особистість, педагога і співпрацювати
для утвердження академічних чеснот, розвитку науково-освітніх
новацій і захисту суспільної моралі.
4. Вимоги до оформлення
Курсова робота є індивідуальною роботою кожного студента та
оформляється окремо кожним студентом згідно із виданим завданням.
Курсова робота оформляється на аркушах формату A4 (210*297мм), які
заповнюються з однієї сторони.
Текст видруковується на принтері. Використання різних чорнил не
дозволяється.
19Заголовки розділів можуть бути виділені великими літерами або шляхом
підкреслення. Текст роботи набирається без помилок українською мовою. Текст
на сторінці розміщується рівномірно з дотриманням відступів: зверху – 2,0 см,
знизу – 3,0 см, зліва – 2,0 см, справа – 1,0 см.
При комп’ютерному наборі необхідно вибрати шрифт Times New Roman
Cyr, розмір шрифта – 14, міжрядковий інтервал –1,5, вирівнювання абзаців – за
шириною, перший рядок – відступ 1 см.
Нумерацію сторінок, розділів, підрозділів, пунктів, підпунктів, рисунків,
таблиць, формул подають арабськими цифрами без знака №. Першою сторінкою
роботи є титульний аркуш. На титульному аркуші номер сторінки не ставлять,
на наступних сторінках номер проставляють у внизу по центру, відстань від краю
сторінки до нижнього колонтитула – 2,0 см.
Зміст, вступ, висновки, список використаних джерел не мають порядкового
номера, але всі аркуші, на яких розміщені згадані структурні частини
розрахункової, нумерують звичайним чином. Не нумерують лише їх заголовки,
тобто не можна друкувати «1. ВСТУП», або «Розділ 9. ВИСНОВКИ».
Кожен розділ повинен мати свій номер, який записується перед його
назвою. Після номера розділу ставиться крапка, наприклад: 1. Тестування та
валідацію створеної системи CI/CD.
Кожен розділ необхідно розпочинати з нової сторінки. Розділ може
складатися з підрозділів. Підрозділи нумерують у межах кожного розділу. Номер
підрозділу складається з номера розділу і порядкового номера підрозділу, між
якими ставлять крапку. У кінці номера підрозділу повинна стояти крапка,
наприклад: «2.3.» (третій підрозділ другого розділу). Потім у тому ж рядку йде
заголовок підрозділу, наприклад: 2.1. Опис інструментів розгортання. Пункти
нумерують у межах кожного підрозділу. Номер пункту складається з порядкових
номерів розділу, підрозділу, пункту, між якими ставлять крапку. У кінці номера
повинна стояти крапка, наприклад: «1.3.2.» (другий пункт третього підрозділу
першого розділу). Потім у тому ж рядку розташовується заголовок пункту.
20Пункт може не мати заголовка. Підпункти нумерують у межах кожного пункту
за такими ж правилами, як пункти.
Ілюстрації (фотографії, креслення, схеми, графіки, карти) і таблиці
необхідно подавати у роботі безпосередньо після тексту, де вони згадані вперше,
або на наступній сторінці. Ілюстрації позначають словом «Рис.» і нумерують
послідовно у межах розділу, за винятком ілюстрацій, поданих у додатках. Номер
ілюстрації повинен складатися з номера розділу і порядкового номера ілюстрації,
між якими ставиться крапка. Наприклад: Рис. 1.2 (другий рисунок першого
розділу). Номер ілюстрації, її назва і пояснювальні підписи розміщують
послідовно під ілюстрацією. Якщо у роботі подано одну ілюстрацію, то її
нумерують за загальними правилами. Написи на рисунках виконуються
шрифтом Times New Roman Cyr (розмір – 14). Рисунки підписують і нумерують
під рисунком по центру тексту. Підписи під рисунками виконують шрифтом
Times New Roman Cyr (розмір – 14), курсив.
Таблиці нумерують послідовно (за винятком таблиць, поданих у додатках)
у межах розділу. У правому верхньому куті над відповідним заголовком таблиці
розміщують напис «Таблиця» із зазначенням її номера (шрифт – Times New
Roman Cyr, розмір – 14, записується курсивом). Номер таблиці повинен
складатися з номера розділу і порядкового номера таблиці, між якими ставиться
крапка, наприклад: «Таблиця 1.2» (друга таблиця першого розділу). Якщо у
роботі одна таблиця, її нумерують за загальними правилами. При переносі
частини таблиці на інший аркуш (сторінку) слово «Таблиця» і номер її вказують
один раз справа над першою частиною таблиці, над іншими частинами пишуть
слова «Продовження табл.» і вказують номер таблиці, наприклад: «Продовження
табл. 1.2». Заголовок таблиці розміщують по центру (шрифт – Times New Roman
Cyr, розмір – 14, записується жирними буквами). Розмір шрифта для набору
текстів у таблицях – 13.
Формули у роботі (якщо їх більше одної) нумерують у межах розділу. Номер
формули складається з номера розділу і порядкового номери формули у розділі,
між якими ставлять крапку. Формули подають у форматі Equation. Номери
21формул пишуть біля правого берега аркуша на рівні відповідної формули у
круглих дужках, наприклад: (3.1) (перша формула третього розділу).
Можливе комп’ютерне виконання графічної частини курсової роботи.
Графічні схеми алгоритмів виконуються згідно з вимогами міжнародного
стандарту ISO 5807-85 «Обробка інформації. Символи і умовні позначення блок-
схем даних, програм та систем, схем програмних мереж і системних ресурсів».
Додаток повинен починатися з нової сторінки та мати заголовок,
надрукований угорі малими літерами з першої великої симетрично відносно
тексту сторінки. Посередині рядка над заголовком малими літерами з першої
великої друкується слово «Додаток ____» і велика літера, що позначає додаток.
Додатки слід позначати послідовно великими літерами української абетки, за
винятком літер Г, Є, І, Ї, Й, О, Ч, Ь, наприклад, Додаток А, Додаток Б і т. д. Один
додаток позначається як Додаток А.
Список літератури виконується згідно з вимогами стандартів. Укладаючи
списки літератури, посилаючись на інші видання, студент повинен керуватися
чинними новими стандартами бібліографічного опису, які розробила Книжкова
палата України.
Треба при формуванні списку використовувати Національний стандарт
України «Інформація та документація. Бібліографічна посилання. Загальні
положення та правила складання. ДСТУ 8302:2015».
225. Зразки оформлення списків літератури:
КНИГИ
Однотомні видання
Один автор
Федорова Л. Д. З історії пам’яткоохоронної та музейної справи у
Наддніпрянській Україні. 1870-ті – 1910-ті рр. Київ, 2013. 373 с.
Два і більше авторів
Zhovinsky E. Ya., Kryuchenko N. O., Paparyha P. S. Geochemistry of
Environmental Objects of the Carpathian Biosphere Reserve. Kyiv, 2013. 100 p.
Людський розвиток в Україні: трансформація рівня життя та регіональні
диспропорції: у 2-х т.: кол. моногр. Київ, 2012. 436 с.
Без автора
Збірник
Софія Київська: Візантія. Русь. Україна. Вип. ІІ. Київ, 2012. 464 с.
Матеріали конференцій, з’їздів, тези доповідей
Фізика імпульсних розрядів в конденсованих середовищах. Материали ХVI
Міжнародної наукової конференції (19–22 сер. 2013, м. Миколаїв). Миколаїв,
2013. 253 с.
Багатотомні видання
Видання загалом
Енциклопедія історії України: у 10 т. Київ: Наук. думка, 2013. Т. 10. 784 с.
Окремий том
Dark energy and dark matter in the Universe. In three vol. Vol. 3. Dark matter:
Observational manifestation and experimental searches. Kyiv: Akademperiodyka,
2015. 356 p.
Серіальні та продовжувані видання
Газета
Світ: всеукр. тижн. / засн.: Мін-во освіти і науки України, Нац. акад. наук
України. 1997, квітень. Київ. Щотиж. 1997, № 1–5.
23Журнал
Вісник Національної академії наук України: загальнонаук. журн. / засн.:
Нац. акад. наук України. 1928, жовтень. Київ. Щоміс. 2016, № 1–12.
Бюлетень
Бюлетень Міністерства юстиції України : наук. журн. / засн.: Мін-во юст.
України. 1999. Київ. Щоміс. 2016, № 6, 24 с.
Продовжуваний збірник
Наука України у світовому інформаційному просторі: серія / засн.: Нац.
акад. наук України. 2008. Київ: Академперіодика.
ІНШІ ВИДАННЯ
Законодавчий матеріал
Про видавничу справу: Закон України від 05.06.1997 № 318/97-ВР. Київ:
Парламентське видавництво, 2015. 24 с.
Правила
Правила пожежної безпеки в Україні. Затв. Мін-вом внутріш. справ України
30.12.2014. Чинний від 10.04.2015. Київ: Техніка, 2003. 157 с.
Збірник стандартів
Правила учета электрической энергии: сб. основных норматив.-техн. док.,
действующих в обл. учета электроэнергии. Москва, 2002. 366 с.
Окремий стандарт
ДСТУ 3017-2015. Видання. Основні види. Терміни та визначення. Київ,
2016. 42 с.
Авторське свідоцтво
А. с. 1810306 СССР, МКИ5 С 02 F 1/469. Спосіб демінералізації водних
розчинів / В. Д. Гребенюк, Н. П. Стрижак, В. В. Гончарук, № 4934753; заяв.
08.05.91; опубл. 23.04.93, Бюл. № 15.
Патент
Пат. КМ 98077 Україна. Спосіб одержання йодиду цезію або йодиду натрію
для вирощування монокристалів. Опубл. 10.04.2015.
24Заявка
Заявка U 2014 06343 Україна, МПК (2014.04) B01J 13/00. Спосіб отримання
колоїдного розчину наночасток срібла / О.А. Півоваров, М.І. Воробйова
(Україна); заявник та патентовласник ДВНЗ «Укр. держ. хім.-технол. ун-т». № u
2014 06343; заявл. 10.06.14.
Каталог
Національна академія наук України. Анотований каталог книжкових видань
2008 року Київ: Академперіодика, 2009. 444 с.
Препринт
Панасюк М. І., Скорбун А. Д., Сплошной Б. М. Про точність визначення
активності твердих радіоактивних відходів гамма-методами. Чорнобиль: Ін-т
пробл. безпеки АЕС НАН України, 2006. 7, [1] с. (Препринт. НАН України, Ін-т
пробл. безпеки АЕС; 06-1).
Автореферат дисертації
Старовойт С. В. Видавнича діяльність Національної академії наук України
у 1918–1933 рр. : автореф. дис. ... канд. іст. наук. Київ, 2003. 20 с.
ЧАСТИНА ВИДАННЯ
Стаття із журналу, збірника, розділ книги
Незалежно
від
кількості
авторів
у
позатекстовому
переліку
бібліографічних посилань (списку літератури)
Яцків Я. С., Радченко А. І. Про ефективність видання наукових журналів в
Україні. Вісн. НАН України. 2012. № 6. С. 62–67.
Назарчук З. Т. Дифракція Е-поляризованих електромагнітних хвиль на
циліндричному екрані з перерізом у вигляді ламаної кривої. Хвилі та дифракція.
Київ, 2005. Кн. 1. С. 507–511.
Скальський В. Р. Становлення методу акустичної емісії в установах
Західного наукового центру. Теорія і практика раціон. проєктування,
виготовлення і експлуатації машинобуд. конструкцій: Праці 2 міжнар. наук.-
техн. конф. (Львів, 11–13 лист. 2010). Львів, 2010. С. 9–10.
25Рецензія
Касьянов Г. Глобальна еволюція людства: культурно-цивілізаційний вимір.
Вісн. Кн. палати. 2001. № 12. С. 14–15.
Рец. на кн.: Шейко В. Культура. Цивілізація. Глобалізація (кінець XIX –
початок XX ст.): моногр.: у 2 т. Харків, 2001. Т. 1. 520 с. ; т. 2. 400 с.
ЕЛЕКТРОННІ РЕСУРСИ ВІДДАЛЕНОГО ДОСТУПУ
Опис ресурсу загалом
Наукові публікації і видавнича діяльність НАН України. Київ, 2007. URL:
http://www.nas.gov.ua/publications (дата звернення: 19.03.2014).
Опис частини електронного ресурсу у позатекстовому переліку
бібліографічних посилань (списку літератури)
Garfield E. More on the ethics of scientific publication: abuses of authorship
attribution and citation amnesia undermine the reward system of science. Essays of an
information
scientist.
URL:
http://www.garfield.library.upenn.edu/essays/
v5p621y1981-82.pdf (Last accessed: 16.04.2013).
НЕОПУБЛІКОВАНІ ВИДАННЯ
Звіт про науково-дослідну роботу
Розвиток науково-видавничої справи на початковому та сучасному етапах
діяльності Національної академії наук України: звіт про НДР (заключний) ВД
«Академперіодика» НАН України; кер. Я. С. Яцків. Київ, 2015. 112 с. № ДР
0113U001213.
Дисертації
Воскобойнікова-Гузєва О. В. Бібліотечно-інформаційна сфера України в
контексті соціальних трансформацій кінця ХХ ст. – 10-х років ХХІ ст.: концепції
стратегічного розвитку, динаміка змін, перспективи: дис. ... д-ра наук із соц.
комунік.: 27.00.03 / Нац. б-ка України ім. В. І. Вернадського. Київ, 2014.
26Депоновані наукові роботи
Тріщ Б. М. Оптимізація температурних полів і напружень у квадратній
пластині з отвором / ЛНУ ім. Івана Франка. Львів, 2001. 14 с. Деп. в ДНТБ
України 11.12.01, № 239.
Література може бути розміщена за алфавітом або у порядку посилання на
неї. У списку можна наводити тільки ту літературу, яка була використана при
виконанні роботи і на яку є посилання у тесті пояснювальної записки. За
використання Internet-джерел обов’язково вказувати повну назву роботи, її дату
та WEB-адресу. У випадку цитування фрагментів роботи відповідний фрагмент
береться в лапки, і за посилання окрім літературного джерела вказується також
сторінка, на якій знаходиться цитата в першоджерелі. Посилання у тексті роботи
на джерела треба зазначати порядковим номером за переліком посилань,
виділеним двома квадратними дужками, наприклад, «... у працях [62, 64, 65, 75,
84, 101]...».
Пояснювальна записка повинна бути сформована за змістом і надійно зшита
з лівої довшої сторони листів формату A4. Для зручності зберігання палітурка
курсової роботи повинна бути жорсткою (виконана із листа ватману чи картону
або паперу ≥100гр/м 2 ).
Робота повинна мати титульну сторінку та завдання, приклади оформлення
яких наведені у додатку А і Б. Титульна сторінка та завдання на роботу повинні
бути надруковані на принтері (або виконані креслярським шрифтом).
5. Організація та контроль виконання роботи
Курсова робота виконується самостійно кожним студентом у відповідності
з графіком, який встановлюється при видаванні завдання на курсову роботу.
Графік виконання роботи контролюється викладачем згідно з розкладом
консультацій або практичних занять з курсової роботи.
Комп’ютерна реалізація курсової роботи здійснюється дистанційно або у
лабораторіях кафедри (за потреби).
276. Захист роботи
У призначений час оформлений курсовий проєкт подається керівнику для
перевірки. За необхідності він може повертатись студенту для доопрацювання.
Захист роботи розпочинається за два тижні до початку сесії. До захисту
приймається робота, оформлена згідно з наведеними вище вимогами, разом із
електронною версією.
Електронні версії подаються у вигляді посилання на git-репозиторій, в
якому знаходиться розміщений проєкт та сформований у текстовому редакторі
текст пояснювальної записки до курсової роботи.
Під час захисту роботи студент повинен показати розгорнуту інформаційну
систему за допомогою обраного інструментарію для CI/CD дати відповідь на
питання за темою роботи.
Захист роботи здійснюється студентом тільки один раз. При незадовільній
оцінці студенту видається нове завдання на курсову роботу.
7. Оцінювання курсової роботи
Оцінювання курсової роботи відбувається в 100-бальній шкалі за такими
критеріями:
o Опис індивідуального проекту (15 балів):
✓ Чіткість та докладність опису мети та основних функціональних
вимог проекту;
✓ Адекватність
та
обґрунтованість
архітектурних
рішень
та
технологічного стеку.
o Реалізація системи CI/CD (25 балів):
✓ Правильність та належна конфігурація обраного інструментарію для
CI/CD;
✓ Автоматизованість та ефективність процесів компіляції, тестування
та розгортання коду;
✓ Інтеграція із системами контролю версій та іншими інструментами
розробки.
28o Тестування та валідація системи(20 балів):
✓ Проведення тестування системи CI/CD на основі реальних даних та
сценаріїв використання;
✓ Відзначення та вирішення виявлених проблем та помилок.
o Оцінка ефективності використаних інструментів (20 балів):
✓ Аналіз покращень у процесах розробки та якості програмного
забезпечення після впровадження системи CI/CD;
✓ Визначення та аргументація результатів оцінки.
o Документація (10 балів):
✓ Чіткість та структурованість документації щодо створення та
налаштування системи CI/CD;
✓ Наявність інструкцій для подальшого використання та підтримки.
o Звіт (10 балів):
✓ Структурованість та наукова обґрунтованість звіту.
✓ Здатність чітко викладати результати, висновки та рекомендації.
8. Завдання на курсову роботу
Завдання на курсову роботу видається і конкретизується керівником. Зразок
завдання на курсову роботу подано у додатку Б.
29Список рекомендованої літератури
1. Джон М. Квіґлі, Кім Л. Робертсон; Configuration Management: Theory and
Application for Engineers, Managers, and Practitioners; Auerbach Publishers
2019 – 419 с.
2. Лорін Хочстеін; Ansible: Up and Running: Automating Configuration
Management and Deployment the Easy Way; 2014 – 334 c.
3. Кіф Морріс; Infrastructure as Code; O'Reilly Media; 2020 – 462 с.
4. Євгеній Брікмен; Terraform: Up & Running: Writing Infrastructure as Code 2nd
Edition; O'Reilly Media; 2019 – 368 с.
5. Майкл Кріф, Мітчел Хашімото. Terraform Cookbook: Efficiently define, launch,
and manage Infrastructure as Code across various cloud platforms. Packt
Publishing, 2020 – 366.
6. Майкл Хуліан; Practical Monitoring: Effective Strategies for the Real World;
O'Reilly Media; 2017 – 170 c.
7. Мартін Роберт; Чиста архітектура (українською мовою); ФАБУЛА, 2019 –
416 с.
8. Скот Граннеман; Linux. Pocket Handbook; Williams 2018 – 464 с.
9. Томас Куріан Теканат – Datadog Cloud Monitoring Quick Start Guide; Packt
Publishing, 2021 – 318 с.
10. Жан Кім, Кевін Бер, Жорж Спафорд; The Phoenix Project: A Novel About IT,
DevOps, and Helping Your Business Win; IT Revolution Press 2019 – 382 с.
11. Емілі Фріман; DevOps For Dummies For Dummies; 2019 – 368 c.
12. Джон Фергюсон Смарт; Jenkins: The Definitive Guide: Continuous Integration
for the Masses; O'Reilly Media; 2011 – 404 с.
13. Скот Чакон, Бен Штрауб; Pro GIT; O'Reilly Media; 2014 – 354 с.
14. Джин Кім, Джез Хамбл, Патрік Дебуа, Джон Вілліс. The DevOps Handbook:
How to Create World-Class Agility, Reliability, and Security in Technology
Organizations. IT Revolution Press, LLC, 2016 – 515 с.
15. Патроклос Папапетру; SonarQube in Action; Manning; 2013 – 392 c.
3016. Мітчел Хашімото; Vagrant: Up and Running; O'Reilly Media 2013 – 158 с.
17. Джонатан Расмусор; The Agile Samurai: How Agile Masters Deliver Great;
Software Pragmatic Bookshelf 2013 – 268 с.
18. Скот Граннеман; Linux. Pocket Handbook; Williams 2018 – 464 с.
19. Джез Хамбл, Дейвид Фарли – Software continuous deployment: Automation of
integration process; Williams 2016 – 432 с.
20. Gene Kim, Behr Kevin, Spafford George. The Phoenix Project: A Novel About
IT, DevOps, and Helping Your Business Win. – Publisher : IT Revolution Press,
2018 – 432 p.
21. Denneman F., Epping D., Hagoort N. VMware vSphere 6.7 : Clustering Deep
Dive – Independently published, 2018 – 565 p.
22. Brendan Burns, Joe Beda, Kelsey Hightower, Lachlan Evenson. Kubernetes: Up
and Running, 3rd Edition – Publisher : O'Reilly Media, 2022 – 540 p.
23. Deepak Vohra. Pro Docker. – Publisher : Apress, 2015 – 271 p.
24. Golden Bernard. Virtualization For Dummies, 1st Edition – Publisher : For
Dummies, 2007 – 384 p.
25. Turnbull James. The Docker Book: Containerization is the new virtualization . –
Independently published, 2014 – 388 p
26. Arundel John, Domingus Justin. Cloud Native Devops with Kubernetes: Building,
Deploying, and Scaling Modern Applications in the Cloud. . – Publisher : O′Reilly,
2019 – 345 p.
27. Hertzog Raphaël, O’Gorman Jim, Aharoni Mati, O’Gorman Joe. Kali Linux
Revealed: Mastering the Penetration Testing Distribution. – Publisher : OffSec
Press, 2021 – 346 p.
28. Arwidmark, J., Nystrom, M. Deployment Fundamentals, Vol. 6: Deploying
Windows 10 Using Microsoft Deployment Toolkit. – Publisher : Deployment
Artist, 2016 – 302 p.
29. Farley Jez, Humble David. Continuous Delivery: Reliable Software Releases
through Build, Test, and Deployment Automation. – Publisher : Addison-Wesley
Professional, 2010 – 512 p.
3130. Michael T. Nygard.
Release It! : Design and Deploy Production-Ready
Software. – Publisher: Pragmatic Bookshelf, 2018 – 378 р.
31. Swartout Paul. Continuous Delivery and DevOps : A Quickstart guide. –
Publisher: Packt Publishing , 2012 – 154 р.
32. Corona Stephen. Nginx :
A practical guide to high perfomance.
–
Publisher: O'Reilly Media, 2016 – 250 р.
33. Farcic V. The DevOps 2.0 Toolkit: Automating the Continuous Deployment
Pipeline with Containerized Microservices.
–
Publisher:
CreateSpace
Independent Publishing Platform, 2016 – 414 р.
34. Laster Brent. Jenkins 2: Up and Running: Evolve Your Deployment Pipeline for
Next Generation Automation. – Publisher: CreateSpace Independent Publishing
Platform. – Publisher: O'Reilly Media, 2018 – 604 р.
35. Davis J., Daniels K. Effective DevOps: Building a Culture of Collaboration,
Affinity, and Tooling at Scale 1st Edition. – Publisher: O'Reilly Media, 2016. –
410 p.
36. Laurie Ben, Laurie Peter.
Apache: The Definitive Guide. 3rd Edition. –
Publisher: O'Reilly Media, 2002. – 410 p.
37. Sharma Rahul. NGINX High Performance. – Publisher: Packt Publishing, 2015. –
168 p.
38. Len Bass, Ingo Weber, Liming Zhu. DevOps A Software Architect’s
Perspective. – Publisher: Addison-Wesley, 2015. – 338р.
32Додаток А. Структура титульної сторінки
МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ «ЛЬВІВСЬКА ПОЛІТЕХНІКА»
Кафедра інформаційних систем та мереж
КУРСОВАРОБОТА
з дисципліни «РОЗГОРТАННЯ ІНФОРМАЦІЙНИХ СИСТЕМ»
на тему:
«РОЗГОРТАННЯ ІНФОРМАЦІЙНОЇ СИСТЕМИ СТВОРЕНОЇ ЗАСОБАМИ
PYTON»
Виконав студент групи ІТ-__ ____________________ ,
№ залікової книжки __________________
Оцінка
Бали
Дата
Керівник
Лучкевич М.М.
ЛЬВІВ 20__
33Додаток Б. Структура завдання на курсову роботу
ЗАВДАННЯ
на курсову роботу
з дисципліни «Розгортання інформаційних систем»
студента групи ІТ-__ _____________________
Т Е М А: «Розгортання інформаційної системи
створеної засобами Pyton»
Завдання:
створити інформаційну систему/середовище безперервної
інтеграції/розгортання відповідно до теми індивідуального проєкту.
ЗМIСТ ЗАВДАННЯ ТА КАЛЕНДАРНИЙ ПЛАН ЙОГО ВИКОНАННЯ
№ з/п
Зміст завдання
Дата
Провести аналітичний огляд літератури за заданою темою та
здійснити визначення та опис мови проєкту
Визначити вимоги до ІС та засоби реалізації проєкту; провести
аргументація вибору і опис методів та інструментів CI/CD
інформаційної системи
Провести налаштування та налагодження автоматизованих
процесів CI/CD для досліджуваної предметної області
Провести тестування та валідацію створеної системи CI/CD
Здійснити оцінку ефективності впровадженої системи CI/CD
Оформити записку до курсового роботи згiдно з вимогами
Мiжнародних стандартiв, дотримуючись такого змiсту:
o вступ;
o визначення та опис мови проєкту;
o аргументація вибору і опис методів та інструментів
CI/CD інформаційної системи;
o налаштування та налагодження автоматизованих
процесів CI/CD для досліджуваної предметної області;
o тестування та валідація створеної системи CI/CD;
o оцінка ефективності впровадженої системи CI/CD;
o висновки;
o список використаних джерел;
o додатки.
ЗАВДАННЯ ПРИЙНЯТО ДО ВИКОНАННЯ: _____________ ___ ___ ____ р.
підпис студента
Керівник роботи:
_____________ /Михайло ЛУЧКЕВИЧ/
34Додаток В. Приклади тем курсової роботи
1. Розгортання
інформаційної
системи
створеної
засобами
Pyton
з
використанням інструменту GitLab
2. Розгортання інформаційної системи створеної засобами VueJS з
використанням інструменту GitLab
3. Розгортання
інформаційної
системи
створеноїзасобамиJavaз
створеноїзасобамиRubyз
використанням інструменту GitLab
4. Розгортання
інформаційної
системи
використанням інструменту GitLab
5. Розгортання інформаційної системи створеної засобами React JS з
використанням інструменту GitLab
6. Розгортання
інформаційної
системи
створеноїзасобамиC#з
створеноїзасобамиPHPз
використанням інструменту GitLab
7. Розгортання
інформаційної
системи
використанням інструменту GitLab
8. Розгортання інформаційної системи створеної засобами AngularJS з
використанням інструменту GitLab
9. Розгортання
інформаційної
системи
створеної
засобами
C++
з
використанням інструменту GitLab
10. Розгортання інформаційної системи створеної засобами Golang з
використанням інструменту Docker
11. Розгортання інформаційної системи створеної засобами Python з
використанням інструменту Docker
12. Розгортання інформаційної системи створеної засобами VueJS з
використанням інструменту Docker
13. Розгортання
інформаційної
системи
створеноїзасобамиJavaз
створеноїзасобамиRubyз
використанням інструменту Docker
14. Розгортання
інформаційної
системи
використанням інструменту Docker
3515. Розгортання інформаційної системи створеної засобами React JS з
використанням інструменту Docker
16. Розгортання
інформаційної
системи
створеноїзасобамиPHPз
створеноїзасобамиC#з
використанням інструменту Docker
17. Розгортання
інформаційної
системи
використанням інструменту Docker
18. Розгортання інформаційної системи створеної засобами AngularJS з
використанням інструменту Docker
19. Розгортання
інформаційної
системи
створеної
засобами
C++
з
використанням інструменту Docker
20. Розгортання інформаційної системи створеної засобами Golang з
використанням інструменту Jenkins
21. Розгортання інформаційної системи створеної засобами Python з
використанням інструменту Jenkins
22. Розгортання інформаційної системи створеної засобами VueJS з
використанням інструменту Jenkins
23. Розгортання
інформаційної
системи
створеноїзасобамиJavaз
створеноїзасобамиRubyз
використанням інструменту Jenkins
24. Розгортання
інформаційної
системи
використанням інструменту Jenkins
25. Розгортання інформаційної системи створеної засобами React JS з
використанням інструменту Jenkins
26. Розгортання
інформаційної
системи
створеноїзасобамиPHPз
створеноїзасобамиC#з
використанням інструменту Jenkins
27. Розгортання
інформаційної
системи
використанням інструменту Jenkins
28. Розгортання інформаційної системи створеної засобами AngularJS з
використанням інструменту Jenkins
29. Розгортання
інформаційної
системи
використанням інструменту Jenkins
36
створеної
засобами
C++
з30. Розгортання інформаційної системи створеної засобами Golang з
використанням інструменту Ansible
31. Розгортання інформаційної системи створеної засобами Python з
використанням інструменту Ansible
32. Розгортання інформаційної системи створеної засобами VueJS з
використанням інструменту Ansible
33. Розгортання
інформаційної
системи
створеноїзасобамиJavaз
створеноїзасобамиRubyз
використанням інструменту Ansible
34. Розгортання
інформаційної
системи
використанням інструменту Ansible
35. Розгортання інформаційної системи створеної засобами React JS з
використанням інструменту Ansible
36. Розгортання
інформаційної
системи
створеноїзасобамиPHPз
створеноїзасобамиC#з
використанням інструменту Ansible
37. Розгортання
інформаційної
системи
використанням інструменту Ansible
38. Розгортання інформаційної системи створеної засобами AngularJS з
використанням інструменту Ansible
39. Розгортання інформаційної системи створеної засобами Golang з
використанням інструменту Prometheus
40. Розгортання
інформаційної
системи
створеної
засобами
C++
з
використанням інструменту Ansible
41. Розгортання інформаційної системи створеної засобами Python з
використанням інструменту Prometheus
42. Розгортання інформаційної системи створеної засобами VueJS з
використанням інструменту Prometheus
43. Розгортання
інформаційної
системи
створеноїзасобамиJavaз
створеноїзасобамиRubyз
використанням інструменту Prometheus
44. Розгортання
інформаційної
системи
використанням інструменту Prometheus
3745. Розгортання інформаційної системи створеної засобами React JS з
використанням інструменту Prometheus
46. Розгортання
інформаційної
системи
створеноїзасобамиPHPз
створеноїзасобамиC#з
використанням інструменту Prometheus
47. Розгортання
інформаційної
системи
використанням інструменту Prometheus
48. Розгортання інформаційної системи створеної засобами AngularJS з
використанням інструменту Prometheus
49. Розгортання
інформаційної
системи
створеної
засобами
C++
з
використанням інструменту Prometheus
50. Розгортання інформаційної системи створеної засобами Golang з
використанням інструменту SonarQube
51. Розгортання інформаційної системи створеної засобами Python з
використанням інструменту SonarQube
52. Розгортання інформаційної системи створеної засобами VueJS з
використанням інструменту SonarQube
53. Розгортання
інформаційної
системи
створеноїзасобамиJavaз
створеноїзасобамиRubyз
використанням інструменту SonarQube
54. Розгортання
інформаційної
системи
використанням інструменту SonarQube
55. Розгортання інформаційної системи створеної засобами React JS з
використанням інструменту SonarQube
56. Розгортання
інформаційної
системи
створеноїзасобамиPHPз
створеноїзасобамиC#з
використанням інструменту SonarQube
57. Розгортання
інформаційної
системи
використанням інструменту SonarQube
58. Розгортання інформаційної системи створеної засобами AngularJS з
використанням інструменту SonarQube
59. Розгортання
інформаційної
системи
використанням інструменту SonarQube
38
створеної
засобами
C++
з60. Розгортання інформаційної системи створеної засобами Golang з
використанням інструменту Datadog
61. Розгортання інформаційної системи створеної засобами Python з
використанням інструменту Datadog
62. Розгортання інформаційної системи створеної засобами VueJS з
використанням інструменту Datadog
63. Розгортання
інформаційної
системи
створеноїзасобамиJavaз
створеноїзасобамиRubyз
використанням інструменту Datadog
64. Розгортання
інформаційної
системи
використанням інструменту Datadog
65. Розгортання інформаційної системи створеної засобами React JS з
використанням інструменту Datadog
66. Розгортання
інформаційної
системи
створеноїзасобамиPHPз
створеноїзасобамиC#з
використанням інструменту Datadog
67. Розгортання
інформаційної
системи
використанням інструменту Datadog
68. Розгортання інформаційної системи створеної засобами AngularJS з
використанням інструменту Datadog
69. Розгортання
інформаційної
системи
використанням інструменту Datadog
39
створеної
засобами
C++
з40
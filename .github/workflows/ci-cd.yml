name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  # Backend tests and build
  backend-build:
    name: Backend - Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend tests
        working-directory: ./backend
        run: npm test || echo "No tests configured yet"

      - name: Build backend Docker image
        run: |
          docker build -t task-management-backend:${{ github.sha }} ./backend
          docker tag task-management-backend:${{ github.sha }} task-management-backend:latest

      - name: Save backend Docker image
        run: docker save task-management-backend:latest -o backend-image.tar

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image.tar
          retention-days: 1

  # Frontend build and test
  frontend-build:
    name: Frontend - Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend application
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3000

      - name: Run frontend linter
        working-directory: ./frontend
        run: npm run lint || echo "Linting skipped"

      - name: Build frontend Docker image
        run: |
          docker build -t task-management-frontend:${{ github.sha }} ./frontend
          docker tag task-management-frontend:${{ github.sha }} task-management-frontend:latest

      - name: Save frontend Docker image
        run: docker save task-management-frontend:latest -o frontend-image.tar

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: frontend-image.tar
          retention-days: 1

  # Integration test
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend image
        uses: actions/download-artifact@v4
        with:
          name: backend-image

      - name: Download frontend image
        uses: actions/download-artifact@v4
        with:
          name: frontend-image

      - name: Load Docker images
        run: |
          docker load -i backend-image.tar
          docker load -i frontend-image.tar

      - name: Start services with Docker Compose
        run: |
          docker compose up -d
          sleep 20

      - name: Check backend health
        run: |
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000/health
          echo "Backend is healthy"

      - name: Check frontend health
        run: |
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:8080/health
          echo "Frontend is healthy"

      - name: Test API endpoints
        run: |
          # Test create task
          TASK_ID=$(curl -s -X POST http://localhost:3000/api/tasks \
            -H "Content-Type: application/json" \
            -d '{"title":"Test Task","description":"Integration test","priority":"high","status":"pending"}' \
            | jq -r '.data.id')
          
          echo "Created task with ID: $TASK_ID"
          
          # Test get all tasks
          curl -s http://localhost:3000/api/tasks | jq
          
          # Test get statistics
          curl -s http://localhost:3000/api/tasks/stats/summary | jq

      - name: Show logs on failure
        if: failure()
        run: |
          docker compose logs backend
          docker compose logs frontend

      - name: Stop services
        if: always()
        run: docker compose down -v

  # Docker Hub deployment
  deploy-docker-hub:
    name: Deploy to Docker Hub
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend image
        uses: actions/download-artifact@v4
        with:
          name: backend-image

      - name: Download frontend image
        uses: actions/download-artifact@v4
        with:
          name: frontend-image

      - name: Load Docker images
        run: |
          docker load -i backend-image.tar
          docker load -i frontend-image.tar

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and push backend image
        if: env.DOCKER_USERNAME != ''
        run: |
          docker tag task-management-backend:latest ${{ secrets.DOCKER_USERNAME }}/task-management-backend:latest
          docker tag task-management-backend:latest ${{ secrets.DOCKER_USERNAME }}/task-management-backend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/task-management-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/task-management-backend:${{ github.sha }}

      - name: Tag and push frontend image
        if: env.DOCKER_USERNAME != ''
        run: |
          docker tag task-management-frontend:latest ${{ secrets.DOCKER_USERNAME }}/task-management-frontend:latest
          docker tag task-management-frontend:latest ${{ secrets.DOCKER_USERNAME }}/task-management-frontend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/task-management-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/task-management-frontend:${{ github.sha }}

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Image**: \`${{ secrets.DOCKER_USERNAME }}/task-management-backend:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Image**: \`${{ secrets.DOCKER_USERNAME }}/task-management-frontend:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  # Deploy to production server
  deploy-to-server:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: [deploy-docker-hub]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            echo "🚀 Starting deployment..."
            
            # Navigate to project directory
            cd ~/task-management-system || cd /home/${{ secrets.SSH_USER }}/task-management-system
            
            # Pull latest code (optional, якщо docker-compose.yml може змінитися)
            git pull origin main || echo "Skipping git pull"
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Pull latest images
            echo "📦 Pulling latest Docker images..."
            docker compose -f docker-compose.prod.yml pull
            
            # Stop old containers
            echo "🛑 Stopping old containers..."
            docker compose -f docker-compose.prod.yml down
            
            # Start new containers
            echo "✅ Starting new containers..."
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} docker compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 15
            
            # Health check
            echo "🏥 Running health checks..."
            curl -f http://localhost:3000/health || echo "Backend health check failed"
            curl -f http://localhost:8080 || echo "Frontend health check passed"
            
            # Show running containers
            docker compose -f docker-compose.prod.yml ps
            
            # Clean up old images
            echo "🧹 Cleaning up old Docker images..."
            docker image prune -f
            
            echo "✨ Deployment completed successfully!"

      - name: Deployment status notification
        if: always()
        run: |
          echo "## 🚀 Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Status**: Deployment successful!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Deployment failed!" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Server**: \`${{ secrets.SSH_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Images deployed**:" >> $GITHUB_STEP_SUMMARY
          echo "  - \`${{ secrets.DOCKER_USERNAME }}/task-management-backend:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "  - \`${{ secrets.DOCKER_USERNAME }}/task-management-frontend:latest\`" >> $GITHUB_STEP_SUMMARY

  # Build status notification
  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, integration-test]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          echo "## Build Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Build: ${{ needs.backend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Build: ${{ needs.frontend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow completed at**: $(date)" >> $GITHUB_STEP_SUMMARY
